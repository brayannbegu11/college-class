const express = require("express");
const app = express();
const HTTP_PORT = process.env.PORT || 8080;
const path = require("path");

app.use(express.urlencoded({ extended: true}))

app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "index.html"))
})

//to receive URL paramters or query parameters
//parameters sent with the route endpoint (URL)
app.get("/select/:language", (req, res) => {

    if(req.params === undefined){
        console.log(`no URL parameters sent to server`);
    }else{
        console.log(`URL params : ${JSON.stringify(req.params)}`);
        console.log(`URL param language : ${req.params.language}`);
    }
    res.send(`Language selected : ${req.params.language}`)
})

/*
example: choose a currency
http://localhost:8080/tourism/CAD
http://localhost:8080/tourism/USD
http://localhost:8080/tourism/EUR
*/
app.get("/tourism/:currency", (req, res) => {
    console.log(`req.params : ${req.params}`);

    if (req.params.currency === "CAD"){
        res.send("Showing values in Canadian dollars")
    }else if (req.params.currency === "USD"){
        res.send("Showing values in United States dollars")
    }else if (req.params.currency === "EUR"){
        res.send("Showing values in Euros")
    }
})

/*
example : endpoint with more than 1 query parameters

e.g.
http://localhost:8080/products/shoes/82947
http://localhost:8080/products/shirts/74839
http://localhost:8080/products/pants/71930
*/
app.get("/products/:category/:productId", (req, res) => {
    res.send(`Selected Product Information : Id : ${req.params.productId}, Category : ${req.params.category}`)
})

/*
POST request with parameters
*/
app.post("/course/:courseCode", (req, res) => {
    if (req.body !== undefined){
        const studName  = req.body.studentName;
        const course = req.params.courseCode;

        if (course === "mads4007"){
            res.send(`${studName} added to Web Development course`)
        }else if (course === "mads4012"){
            res.send(`${studName} added to Full Stack Development course`)
        }else{
            res.send(`ERROR : course code unknown`)
        }
    }
})



/*
Task : 
1. create a get endpoint "/class-roster" ; send the response as with dynamic HTML generated by server
    The HTML response should show a table with all information about the students available in the list

2. For each row in the table, provide a form to allow to update the grade for respective student, and a submit button, 
3. Each form action attribute should redirect to server endpoint "/update".
    For example, form action for first student should be action="/update/G101"

4. Create a post endpoint "/update/:studId" which gets student ID as request parameter
5. the update endpoint should check if the student with given studId is present in the array.
    If yes, update the grade with the input value received with req.body. Show the response that the grade has been updated.
        Alternatively, you can redirect user to same after updatin the table with new data
    If no, send the response to the user to inform the same.

Add new student
6. Create another endpoint or additional HTML elemnts on class-roster endpoint to allow the user enter new student details
7. the provided details should be added to existing student list
8. Once the new object is added, redirect the user to class-roster route

Delete the student
9. modify the response from class-roster to add a button to delete the respective student
10. delete the student object for matching studId from the array
11. show success message to user, redirect to the class-roster route
*/


const studentList = [
    {studId : "G101", studName : "Adam", grade : 100},
    {studId : "G102", studName : "Mila", grade : 80},
    {studId : "G103", studName : "Oscar", grade : 75},
    {studId : "G104", studName : "Andres", grade : 92}
]

app.get("/class-roster", (req, res) => {

    let responseHTML = `
        <h1> Class Roster </h1>

        <form action="/insert" method="post">

            <label for="studId"> Student ID </label>
            <input type="text" name="studId" placeholder="Enter student id"><br>

            <label for="studentName"> Name </label>
            <input type="text" name="studentName" placeholder="Enter student name"><br>

            <label for="grade"> Grade </label>
            <input type="number" name="grade" placeholder="Enter grade"><br>

            <button type="submit"> Insert Student </button>
        </form>`;


    responseHTML += `<table style="border: 1px solid black">
        <tr><th>Student ID</th> <th>Student Name</th> <th>Grade</th><th>Grade to update</th></tr>
        `;
        
        for(stud of studentList){
            responseHTML += `<tr>
            <td>${stud.studId}</td>
            <td>${stud.studName}</td>
            <td>${stud.grade}</td>
            <td>
                <form action="/update/${stud.studId}" method="post">
                    <input type="number" name="updatedGrade" placeholder="Enter updated grade">
                    <button type="submit"> Update Grade</button>
                </form>
            </td>
            <td>
                <form action="/delete/${stud.studId}" method="post">
                    <button type="submit"> Delete Student </button>
                </form>
            </td>
            </tr>`;
        }

    responseHTML += `</table>`;
    res.send(responseHTML)
})

app.post("/update/:studId", (req, res) => {
    if (req.body !== undefined){
        const updatedGrade  = req.body.updatedGrade;
        const studId = req.params.studId;

        for(stud of studentList){
            if (stud.studId === studId){
                stud.grade = updatedGrade;

                //res.redirect() to navigate the user to another endpoint of the server
                res.redirect("/class-roster")
            }
        }
    }
})

app.post("/insert", (req, res) => {
    if (req.body !== undefined){
        const studId = req.body.studId;
        const name = req.body.studentName;
        const grade  = req.body.grade;
        studentList.push({studId: studId, studName: name, grade: grade})

        //res.redirect() to navigate the user to another endpoint of the server
        res.redirect("/class-roster")
    }
})



app.post("/delete/:studId", (req, res) => {
    if (req.body !== undefined){
        const studId = req.params.studId;

        for(let i = 0; i < studentList.length; i++){
            if (studentList[i].studId === studId){

                studentList.splice(i, 1)

                //res.redirect() to navigate the user to another endpoint of the server
                res.redirect("/class-roster")
            }
        }
    }
})

const onHttpStart = () => {
    console.log(`The web server has started at http://localhost:${HTTP_PORT}`);
    console.log("Press CTRL+C to stop the server.");
};
  
app.listen(HTTP_PORT, onHttpStart);
  

/*
Parts of URL

http://www.example.com:8000/page/1?tag=functional#intro
http://www.example.com:8000/page/1?language=en

protocol : HTTP or HTTPS (HTTPSecured)
host : www.example.com
port : 8000
path: /page/1
? - query parameters
query : tag=functional
fragment of HTML page : #intro

*/